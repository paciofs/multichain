os: osx
osx_image: xcode10.1

language: cpp

# cache V8 artifacts across stages
cache:
  # large cache requires large timeout for transfer
  timeout: 1800
  directories:
    - ./v8build

jobs:
  include:
    # separate fetching and building of V8 into multiple shared-cache stages to avoid hitting the 50 minute time limit
    - stage: fetch-v8
      install: ./.travis/fetch-v8.sh
      script: skip
      # include `skip-stages` anywhere in the commit message to skip all of these V8-related stages
      # when the cache is up-to-date, this saves a lot of time
      if: commit_message !~ /skip-stages/

    # build dependencies
    - stage: build-v8-stage-1
      install: ./.travis/build-v8.sh antlr4 icu inspector torque v8_libbase v8_libplatform v8_libsampler
      script: skip
      if: commit_message !~ /skip-stages/
    - stage: build-v8-stage-2
      install: ./.travis/build-v8.sh v8_base
      script: skip
      if: commit_message !~ /skip-stages/

    # finally build V8
    - stage: build-v8-stage-3
      install: ./.travis/build-v8.sh d8 v8
      script: skip
      if: commit_message !~ /skip-stages/

    # now build and deploy MultiChain
    - stage: build-multichain
      addons:
        # use addon instead of `brew install` since it does not exit with 1
        # if packages are already installed
        homebrew:
          packages:
            - autoconf
            - automake
            - boost
            - berkeley-db4
            - libtool
            - nasm
            - openssl
            - pkg-config
            - python
            - rename

      install:
        # it is insufficient to only install boost@1.57 in the first place
        # reinstallation is necessary for some reason
        - brew uninstall --ignore-dependencies boost
        - brew install boost@1.57
        - brew link boost@1.57 --force

        # reinstall python, for some reason the default installation errors on importing hashlib
        - brew uninstall --ignore-dependencies python@2
        - brew install python@2

        # make V8 libraries available
        - pip install pathlib2
        - python ./depends/v8_data_lib.py --multichain $(pwd)

        # hide dynamic libraries from the build system so we get a static build
        - rename -e 's/.dylib/.dylib.hidden/' /usr/local/opt/boost/lib/*.dylib
        - rename -e 's/.dylib/.dylib.hidden/' /usr/local/opt/berkeley-db@4/lib/*.dylib

        # reinstall OpenSSL AFTER reinstalling python, but with static libraries only
        - sed -i '' 's/^    shared$/    no-shared/' /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/openssl.rb
        - brew reinstall openssl --build-from-source
        - export CPPFLAGS=-I/usr/local/opt/openssl/include
        - export LDFLAGS=-L/usr/local/opt/openssl/lib

        # disable all warnings to reduce build verbosity
        - export CXXFLAGS=-w
        - ./autogen.sh
        - ./configure --with-gui=no --with-libs=no --with-miniupnpc=no --with-boost=/usr/local/opt/boost@1.57
        - make -j2

      script:
        # tiny test
        - mkdir /tmp/mc-test
        - ./src/multichain-util create test 20006 -datadir=/tmp/mc-test -rpcpassword=rpcpass
        - ./src/multichaind test 20006 -daemon -datadir=/tmp/mc-test -pid=/tmp/mc-test/test/multichain.pid
        - ./src/multichain-cli test -datadir=/tmp/mc-test getblockchaininfo
        - kill $(< /tmp/mc-test/test/multichain.pid)

      before_deploy:
        # figure out date of last upstream commit to this branch
        - LAST_MERGE=$(git log --merges --max-count=1 ${TRAVIS_BRANCH} --format=%ad)
        - LAST_UPSTREAM=$(git log --before="${LAST_MERGE}" --skip=1 --max-count=1 --format=%ai ${TRAVIS_BRANCH})
        - LAST_UPSTREAM=$(TZ=UTC date -j -f "%Y-%m-%d %H:%M:%S %z" "${LAST_UPSTREAM}" "+%Y%m%dT%H%M%S")

        # pack binaries
        - mkdir multichain-${TRAVIS_BRANCH}-${TRAVIS_OS_NAME}
        - cp ./src/multichain-cli ./multichain-${TRAVIS_BRANCH}-${TRAVIS_OS_NAME}
        - cp ./src/multichain-util ./multichain-${TRAVIS_BRANCH}-${TRAVIS_OS_NAME}
        - cp ./src/multichaind ./multichain-${TRAVIS_BRANCH}-${TRAVIS_OS_NAME}
        - cp ./src/multichaind-cold ./multichain-${TRAVIS_BRANCH}-${TRAVIS_OS_NAME}
        - tar czf multichain-${TRAVIS_BRANCH}-${TRAVIS_OS_NAME}-${LAST_UPSTREAM}.tar.gz ./multichain-${TRAVIS_BRANCH}-${TRAVIS_OS_NAME}

        # this names the deployed tag
        - export TRAVIS_TAG=${TRAVIS_BRANCH}

      deploy:
        # deploy as GitHub release
        provider: releases
        api_key:
          # encrypted GitHub OAuth token, generated using `travis setup releases` and set in Travis settings
          secure: ${ENCRYPTED_GITHUB_OAUTH_TOKEN}
        file: ./multichain-${TRAVIS_BRANCH}-${TRAVIS_OS_NAME}-${LAST_UPSTREAM}.tar.gz
        skip_cleanup: true
        overwrite: true
        on:
          repo: ${TRAVIS_REPO_SLUG}
          branch: ${TRAVIS_BRANCH}
          tags: false
